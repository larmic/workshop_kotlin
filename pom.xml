<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <groupId>de.larmic.workshop</groupId>
    <artifactId>kotlin</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>

    <name>Kotlin Workshop</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <kotlin.version>2.2.0</kotlin.version>
        <kotlin.code.style>official</kotlin.code.style>

        <junit.version>5.13.3</junit.version>
        <mockk.version>1.14.5</mockk.version>
        <kotest.version>5.9.1</kotest.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
            <version>${kotlin.version}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <!--
            Kotest ist eine Alternative zu JUnit und speziell für Kotlin geschrieben.
            Vorteil JUnit: weit verbreitet und funktioniert wunderbar mit Kotlin
            Vorteil Kotest: spezielle Kotlin DSL Syntax
            In diesem Projekt werden nur die Assertions als Alternative zu AssertJ
            eingesetzt.
            siehe: https://kotest.io/
           -->
        <dependency>
            <groupId>io.kotest</groupId>
            <artifactId>kotest-assertions-core-jvm</artifactId>
            <version>${kotest.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- kotlin mocking framework
             siehe: https://mockk.io/
            -->
        <dependency>
            <groupId>io.mockk</groupId>
            <artifactId>mockk-jvm</artifactId>
            <version>${mockk.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- springmockk ist eine Spring Boot Mockk integration
             siehe: https://github.com/Ninja-Squad/springmockk
            -->
        <!--dependency>
            <groupId>com.ninja-squad</groupId>
            <artifactId>springmockk</artifactId>
            <version>4.0.2</version>
            <scope>test</scope>
        </dependency-->
    </dependencies>

    <build>
        <sourceDirectory>src/main/kotlin</sourceDirectory>
        <testSourceDirectory>src/test/kotlin</testSourceDirectory>

        <plugins>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <version>${kotlin.version}</version>
                <extensions>true</extensions>
                <!-- mit dem setzen von extensions auf true wird als execution der default angenommen,
                     somit muss die execution nicht mehr händisch angegeben werden -->
                <!--executions>
                    <execution>
                        <id>compile</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>test-compile</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions-->
                <configuration>
                    <args>
                        <!-- JSR-305 behandelt die Nutzung von Java @Nonnull und @Nullable
                             Java ist nicht Nullsafe und nutzt diese Annotationen, um dem Compiler mitzuteilen,
                             dass ein Property nicht Null oder Null sein kann.
                             -Xjsr305 beschreibt, wie der Kotlin-Compiler damit umgehen soll.

                             -Xjsr305=default   -> Der Compiler loggt eine Warnung aus
                             -Xjsr305=strict    -> Der Compiler liefert einen Fehler
                             -Xjsr305=ignore    -> Der Compiler ignoriert die Annotationen
                            -->
                        <arg>-Xjsr305=strict</arg>
                        <!-- Vor Kotlin 2.0 hat eine data-class mit private constructor die Methoden
                             equals(), hashcode() und copy() trotzdem freigegeben. Mit Version 2.0 ist
                             dies immer noch aus Kompatibilitätsgründen so, wird aber mit 2.2 deaktiviert.
                             Um das Verhalten von 2.2 schon zu garantieren, gibt es das
                             Flag 'consistent-data-class-copy-visibility'.

                             Siehe https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-consistent-copy-visibility/
                            -->
                        <arg>-Xconsistent-data-class-copy-visibility</arg>
                    </args>
                </configuration>
            </plugin>
            <!-- Wird hier benötigt, ein ausführbares Jar zu erzeugen. Spring Boot und Quarkus haben dafür eigene
                 Lösungen parat und dieser Bereich dient explizit für dieses Beispiel und wird selten in dieser
                 Form benötigt.
                -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.7.1</version>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <archive>
                                <manifest>
                                    <mainClass>de.larmic.workshop.kotlin.MainKt</mainClass>
                                </manifest>
                            </archive>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
</project>
